<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义参数常量-->
    <!-- logback 的级别
        TRACE < DEBUG < INFO < WARN < ERROR
        通常只用 DEBUG INFO ERROR 三个级别
    -->
    <property name="log.level" value="debug"/>
    <property name="log.maxHistory" value="30"/>
    <!-- 该变量指定日志存储的根路径 -->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
    <!-- 该变量用于指定日志展现的格式
        %d：时间格式
        [%thread]：执行的线程
        %-5lever：隔开5个字符宽度后显示日志级别
        %logger{50}-%msg：日志信息
        %n：换行符
     -->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5lever %logger{50} - %msg%n"/>

    <!-- appender 标签用于告诉 logback 要将日志输出到哪个地方 -->
    <!-- 控制台设置 -->
    <appender name ="consoleAppender" class="ch.qos.logback.core.ConsoleAppender" >
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- DEBUG 设置-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- INFO 设置-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR 设置-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- logger 主要用来存储日志对象
        同时告诉 logback 要关注哪个目录下到信息
        本例中设置为 como.fusiu.o2o 下的信息，也就是整个目录
        level 属性用来告诉 logback 要记录哪个级别以上的信息
        此处用的是 ${log.level}，也就是在上文中记录的默认为 debug
    -->
    <!-- additivity 属性
        1、该属性的默认值为 true
        2、该属性为 true 时，logger 就会把 root 中的 appender-ref 也继承过来
        3、当 logger 继承了 root 中的 consoleAppender 后，会将信息打印到控制台
        但是要注意：root 中默认到级别虽然为 info，但是 logger 中为 debug，所以继承过来后
        的级别为 debug，也就是 debug 级别的信息也会打印
    -->
    <logger name="com.fusiu.o2o" level="${log.level}" additivity="true">
        <!-- logger 需要绑定 appender
            也就是该 logger 对象会向绑定了的 appender 中输出信息
        -->
        <appender-ref ref="debugAppender" />
        <appender-ref ref="infoAppender" />
        <appender-ref ref="errorAppender" />
    </logger>
    <!-- root 标签其实就是一个特殊的 logger
        1、level 属性指定 root 的默认级别，如果 lagger 标签中的 level 没有指定，就会集成 root 的level
        2、root 中的 appender-ref 指定为控制台,也就是和 root 相关信息都会打印到控制台
    -->
    <root level="info">
        <appender-ref ref="consoleAppender" />
    </root>
    <!-- 注意：项目中的所有类，都只能有一个 logger
        也就是说，类要么在 logger 标签中，要么在 root 标签中
        在本例中，com.fusiu.o2o 目录下的所有类都引入到了 logger 中
        但是因为 logger 也继承了 root ，因此这些类的日志信息也会打印到控制台上
    -->
</configuration>